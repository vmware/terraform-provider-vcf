// © Broadcom. All Rights Reserved.
// The term “Broadcom” refers to Broadcom Inc. and/or its subsidiaries.
// SPDX-License-Identifier: MPL-2.0

package network

import (
	"fmt"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"
	utils "github.com/vmware/terraform-provider-vcf/internal/resource_utils"
	"github.com/vmware/vcf-sdk-go/vcf"

	validationutils "github.com/vmware/terraform-provider-vcf/internal/validation"
)

// VdsSchema this helper function extracts the VDS Schema, so that
// it's made available for both workload domain and cluster creation.
// This specification contains vSphere distributed switch configurations.
func VdsSchema() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"name": {
				Type:         schema.TypeString,
				Required:     true,
				Description:  "vSphere Distributed Switch name",
				ValidateFunc: validation.NoZeroValues,
			},
			"is_used_by_nsx": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: "Identifies if the vSphere distributed switch is used by NSX",
			},
			"portgroup": {
				Type:        schema.TypeList,
				Optional:    true,
				Description: "List of portgroups to be associated with the vSphere Distributed Switch",
				Elem:        PortgroupSchema(),
			},
			"nioc_bandwidth_allocations": {
				Type:     schema.TypeList,
				Optional: true,
				Description: "List of Network I/O Control Bandwidth Allocations for System Traffic based on" +
					" shares, reservation, and limit, you can configure Network I/O Control to allocate certain amount" +
					" of bandwidth for traffic generated by vSphere Fault Tolerance, iSCSI storage, vSphere vMotion, and so on." +
					" You can use Network I/O Control on a distributed switch to configure bandwidth allocation for the traffic " +
					" that is related to the main system features in vSphere",
				Elem: NiocBandwidthAllocationSchema(),
			},
		},
	}
}

func TryConvertToVdsSpec(object map[string]interface{}) (*vcf.VdsSpec, error) {
	result := &vcf.VdsSpec{}
	if object == nil {
		return nil, fmt.Errorf("cannot convert to VdsSpec, object is nil")
	}
	name := object["name"].(string)
	if len(name) == 0 {
		return nil, fmt.Errorf("cannot convert to VdsSpec, name is required")
	}
	result.Name = name
	if isUsedByNsx, ok := object["is_used_by_nsx"]; ok && !validationutils.IsEmpty(isUsedByNsx) {
		result.IsUsedByNsxt = utils.ToBoolPointer(isUsedByNsx)
	}
	if portgroupsRaw, ok := object["portgroup"]; ok && !validationutils.IsEmpty(portgroupsRaw) {
		portgroupsList := portgroupsRaw.([]interface{})
		if len(portgroupsList) > 0 {
			portGroupSpecs := []vcf.PortgroupSpec{}
			for _, portgroupListEntry := range portgroupsList {
				portgroupSpec, err := tryConvertToPortgroupSpec(portgroupListEntry.(map[string]interface{}))
				if err != nil {
					return nil, err
				}
				portGroupSpecs = append(portGroupSpecs, *portgroupSpec)
			}
			result.PortGroupSpecs = &portGroupSpecs
		}
	}
	if niocBandwidthAllocationsRaw, ok := object["nioc_bandwidth_allocations"]; ok && !validationutils.IsEmpty(niocBandwidthAllocationsRaw) {
		niocBandwidthAllocationsList := niocBandwidthAllocationsRaw.([]interface{})
		if len(niocBandwidthAllocationsList) > 0 {
			specs := []vcf.NiocBandwidthAllocationSpec{}
			for _, niocBandwidthAllocationListEntry := range niocBandwidthAllocationsList {
				niocBandwidthAllocationSpec, err := tryConvertToNiocBandwidthAllocationSpec(
					niocBandwidthAllocationListEntry.(map[string]interface{}))
				if err != nil {
					return nil, err
				}
				specs = append(specs, *niocBandwidthAllocationSpec)
			}
			result.NiocBandwidthAllocationSpecs = &specs
		}
	}

	return result, nil
}

func FlattenVdsSpec(vdsSpec vcf.VdsSpec) map[string]interface{} {
	result := make(map[string]interface{})
	result["name"] = vdsSpec.Name
	result["is_used_by_nsx"] = vdsSpec.IsUsedByNsxt
	flattenedNiocBandwidthAllocationSpecs := *new([]map[string]interface{})
	for _, niocBandwidthAllocationSpec := range *vdsSpec.NiocBandwidthAllocationSpecs {
		flattenedNiocBandwidthAllocationSpecs = append(flattenedNiocBandwidthAllocationSpecs,
			flattenNiocBandwidthAllocationSpec(niocBandwidthAllocationSpec))
	}
	result["nioc_bandwidth_allocations"] = flattenedNiocBandwidthAllocationSpecs

	flattenedPortgroupSpecs := *new([]map[string]interface{})
	for _, portgroupSpec := range *vdsSpec.PortGroupSpecs {
		flattenedPortgroupSpecs = append(flattenedPortgroupSpecs,
			flattenPortgroupSpec(portgroupSpec))
	}
	result["portgroup"] = flattenedPortgroupSpecs

	return result
}
